{
  "name": "background",
  "type": "registry:ui",
  "files": [
    {
      "path": "magicui/background.tsx",
      "content": "\"use client\";\nimport React, { useEffect, useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { useTheme } from \"next-themes\";\n\n/** Content that can be either a URL string or a React element */\ntype LayerContent = string | React.ReactElement<any>;\n\n/** Configuration for responsive backgrounds at different breakpoints */\ntype ResponsiveBackground = {\n  /** Required default background content */\n  default: LayerContent;\n  /** Small devices (640px and up) */\n  sm?: LayerContent;\n  /** Medium devices (768px and up) */\n  md?: LayerContent;\n  /** Large devices (1024px and up) */\n  lg?: LayerContent;\n  /** Extra large devices (1280px and up) */\n  xl?: LayerContent;\n  /** 2XL devices (1536px and up) */\n  \"2xl\"?: LayerContent;\n  /** Optional dark mode background */\n  dark?: LayerContent;\n};\n\n/** Props for the BackgroundContainer component */\nexport type BackgroundProps = {\n  children: React.ReactNode;\n  background?: LayerContent | ResponsiveBackground;\n  overlay?: LayerContent;\n  className?: string;\n  classNames?: {\n    container?: string;\n    background?: string;\n    overlay?: string;\n    content?: string;\n  };\n};\n\n/**\n * Renders a layer with either a React element or an image URL\n * @param content - The content to render (React element or image URL)\n * @param className - CSS classes to apply\n * @param style - Additional CSS styles\n */\nexport const Layer = ({\n  content,\n  className,\n  style,\n}: {\n  content: LayerContent;\n  className?: string;\n  style?: React.CSSProperties;\n}) => {\n  if (React.isValidElement(content)) {\n    return React.cloneElement(\n      content as React.ReactElement<{\n        className?: string;\n        style?: React.CSSProperties;\n      }>,\n      {\n        className: cn(\n          className,\n          (content.props as { className?: string }).className\n        ),\n        style: {\n          ...style,\n          ...(content.props as { style?: React.CSSProperties }).style,\n        },\n      }\n    );\n  }\n\n  return (\n    <div\n      className={className}\n      style={{\n        ...style,\n        backgroundImage:\n          typeof content === \"string\" ? `url('${content}')` : undefined,\n      }}\n    />\n  );\n};\n\nexport default function Background({\n  children,\n  background,\n  overlay,\n  className,\n  classNames = {},\n}: BackgroundProps) {\n  const { theme } = useTheme(); // Get the current theme (light/dark)\n  const [resolvedTheme, setResolvedTheme] = useState(theme);\n\n  // Wait for the theme to be resolved (in case of SSR mismatch)\n  useEffect(() => {\n    setResolvedTheme(theme);\n  }, [theme]);\n\n  if (!background) return <div className={className}>{children}</div>;\n\n  /**\n   * Type guard to check if the background is a responsive configuration\n   * @param bg - Background content to check\n   * @returns True if the background is a responsive configuration\n   */\n  const isResponsiveBackground = (\n    bg: LayerContent | ResponsiveBackground\n  ): bg is ResponsiveBackground => {\n    return (\n      typeof bg === \"object\" && !React.isValidElement(bg) && \"default\" in bg\n    );\n  };\n\n  /**\n   * Extracts the appropriate background content based on type\n   * @param bg - Background content or configuration\n   * @returns The resolved background content\n   */\n  const getBackgroundContent = (\n    bg: LayerContent | ResponsiveBackground\n  ): LayerContent => {\n    if (isResponsiveBackground(bg)) {\n      // Use dark mode background if theme is dark\n      if (resolvedTheme === \"dark\" && bg.dark) {\n        return bg.dark; // Use dark mode background if available\n      }\n      return bg.default; // Use default background for light mode\n    }\n    return bg;\n  };\n\n  return (\n    <div\n      className={cn(\n        \"relative overflow-visible\", // Base container styles\n        className,\n        classNames.container\n      )}\n    >\n      {/* Base Background Layer */}\n      <Layer\n        content={getBackgroundContent(background)}\n        className={cn(\n          \"absolute inset-0 pointer-events-none select-none bg-cover bg-center\",\n          classNames.background\n        )}\n      />\n\n      {/* Optional Overlay */}\n      {overlay && (\n        <Layer\n          content={overlay}\n          className={cn(\n            \"absolute inset-0 pointer-events-none select-none\",\n            classNames.overlay\n          )}\n        />\n      )}\n\n      {/* Content Layer */}\n      <div className={cn(\"relative z-10\", classNames.content)}>{children}</div>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}