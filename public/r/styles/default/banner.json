{
  "name": "banner",
  "type": "registry:ui",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "path": "magicui/banner.tsx",
      "content": "\"use client\";\nimport { ArrowRightIcon } from \"lucide-react\";\nimport { useEffect } from \"react\";\nimport { cn } from \"@nextui-org/react\";\n\nimport mitt from \"mitt\";\n\ntype Events = {\n  bannerVisibilityChange: \"hidden\" | \"visible\";\n};\n/**\n * Event emitter for the application.\n */\nconst emitter = mitt<Events>();\n\nexport type TopBannerProps = {\n  pathName: string;\n  /** Current language for localized paths. */\n  /** Array of path-based banner configurations. */\n  pathsData: {\n    path: string;\n    gradientClassName?: string;\n    emoji?: string;\n    primaryText?: string;\n    primaryLink?: {\n      href: string;\n      label: string;\n    };\n    secondaryLink?: {\n      href: string;\n    };\n  }[];\n  /** Object defining style slots for customization. */\n  classNames?: {\n    base?: string;\n    gradientShapeLeft?: string;\n    gradientShapeRight?: string;\n    contentContainer?: string;\n    secondaryLink?: string;\n    primaryLinkContainer?: string;\n    primaryLinkBackground?: string;\n    primaryLinkText?: string;\n    arrowIcon?: string;\n  };\n};\n\n/**\n * Banner component displaying localized announcements or call-to-action links,\n * with dynamic gradient backgrounds and scroll-based visibility control.\n * @param pathsData - The data for the paths.\n * @param pathName - The current path.\n * @param classNames - The class names for the banner.\n * @returns JSX.Element\n */\nconst Banner = ({ pathsData, pathName, classNames }: TopBannerProps) => {\n  // Find the content data for the current path\n  const currentPathData = pathsData?.find((item) =>\n    pathName?.includes(item.path),\n  );\n\n  useEffect(() => {\n    if (!currentPathData) return;\n\n    const handleScroll = () => {\n      if (window.scrollY < 48) {\n        emitter.emit(\"bannerVisibilityChange\", \"visible\");\n      } else {\n        emitter.emit(\"bannerVisibilityChange\", \"hidden\");\n      }\n    };\n\n    // Add scroll listener\n    window.addEventListener(\"scroll\", handleScroll, { passive: true });\n\n    // Cleanup listener on component unmount\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, [currentPathData]);\n\n  // If no content data is found for the current path, hide the banner\n  if (!currentPathData) return null;\n\n  const {\n    emoji = \"ðŸš€\",\n    primaryText,\n    primaryLink,\n    secondaryLink,\n    gradientClassName = \"from-[#ff80b5] to-[#9089fc] dark:from-[#F54180] dark:to-[#338EF7]\",\n  } = currentPathData;\n\n  return (\n    <div\n      className={cn(\n        \"relative z-50 isolate flex items-center gap-x-6 overflow-hidden bg-background border-b-1 border-divider px-6 py-2 sm:px-3.5 sm:before:flex-1\",\n        classNames?.base,\n      )}\n    >\n      {/* Background Shapes */}\n      <div\n        aria-hidden=\"true\"\n        className={cn(\n          \"absolute left-[max(-7rem,calc(50%-52rem))] top-1/2 -z-10 -translate-y-1/2 transform-gpu blur-2xl\",\n          classNames?.gradientShapeLeft,\n        )}\n      >\n        <div\n          className={cn(\n            \"aspect-[577/310] w-[36.0625rem] bg-gradient-to-r opacity-20 dark:opacity-10\",\n            gradientClassName,\n          )}\n          style={{\n            clipPath:\n              \"polygon(74.8% 41.9%, 97.2% 73.2%, 100% 34.9%, 92.5% 0.4%, 87.5% 0%, 75% 28.6%, 58.5% 54.6%, 50.1% 56.8%, 46.9% 44%, 48.3% 17.4%, 24.7% 53.9%, 0% 27.9%, 11.9% 74.2%, 24.9% 54.1%, 68.6% 100%, 74.8% 41.9%)\",\n          }}\n        />\n      </div>\n      <div\n        aria-hidden=\"true\"\n        className={cn(\n          \"absolute left-[max(45rem,calc(50%+8rem))] top-1/2 -z-10 -translate-y-1/2 transform-gpu blur-2xl\",\n          classNames?.gradientShapeRight,\n        )}\n      >\n        <div\n          className={cn(\n            \"aspect-[577/310] w-[36.0625rem] opacity-30 dark:opacity-20\",\n            gradientClassName,\n          )}\n          style={{\n            clipPath:\n              \"polygon(74.8% 41.9%, 97.2% 73.2%, 100% 34.9%, 92.5% 0.4%, 87.5% 0%, 75% 28.6%, 58.5% 54.6%, 50.1% 56.8%, 46.9% 44%, 48.3% 17.4%, 24.7% 53.9%, 0% 27.9%, 11.9% 74.2%, 24.9% 54.1%, 68.6% 100%, 74.8% 41.9%)\",\n          }}\n        />\n      </div>\n\n      {/* Content */}\n      <div\n        className={cn(\n          \"flex w-full items-center justify-between md:justify-center gap-x-3\",\n          classNames?.contentContainer,\n        )}\n      >\n        {secondaryLink && (\n          <a\n            className={cn(\n              \"text-small flex items-end sm:text-[0.93rem] text-foreground hover:opacity-80 transition-opacity\",\n              classNames?.secondaryLink,\n            )}\n            href={secondaryLink.href}\n            rel=\"noopener noreferrer\"\n          >\n            <span aria-label=\"emoji\" role=\"img\">\n              {emoji}\n            </span>\n            <span\n              className=\"inline-flex md:ml-1 animate-text-gradient font-medium bg-clip-text text-transparent bg-[linear-gradient(90deg,#D6009A_0%,#8a56cc_50%,#D6009A_100%)] dark:bg-[linear-gradient(90deg,#FFEBF9_0%,#8a56cc_50%,#FFEBF9_100%)]\"\n              style={{\n                fontSize: \"inherit\",\n                backgroundSize: \"200%\",\n                backgroundClip: \"text\",\n                WebkitBackgroundClip: \"text\",\n                color: \"transparent\",\n              }}\n            >\n              {primaryText}\n            </span>\n          </a>\n        )}\n        {primaryLink && (\n          <a\n            className={cn(\n              \"flex group min-w-[120px] items-center font-semibold text-foreground shadow-sm gap-1.5 relative overflow-hidden rounded-full p-[1px] focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary\",\n              classNames?.primaryLinkContainer,\n            )}\n            href={primaryLink.href}\n          >\n            <span\n              className={cn(\n                \"absolute inset-[-1000%] animate-[spin_3s_linear_infinite] bg-[conic-gradient(from_90deg_at_50%_50%,#F54180_0%,#338EF7_50%,#F54180_100%)]\",\n                classNames?.primaryLinkBackground,\n              )}\n            />\n            <div\n              className={cn(\n                \"inline-flex h-full w-full cursor-pointer items-center justify-center rounded-full bg-background group-hover:bg-background/70 transition-background px-3 py-1 text-sm font-medium text-foreground backdrop-blur-3xl\",\n                classNames?.primaryLinkText,\n              )}\n            >\n              {primaryLink.label}\n              <ArrowRightIcon\n                aria-hidden=\"true\"\n                className={cn(\n                  \"outline-none transition-transform group-hover:translate-x-0.5 [&>path]:stroke-[2px]\",\n                  classNames?.arrowIcon,\n                )}\n                width={16}\n              />\n            </div>\n          </a>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Banner;\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}